const fetch = require("node-fetch");
const {parseHtml, formatText} = require("./helper");
const { SUBSCRIBE_TIMES_DATA } = require('./CONST.js');

const zodiacSignsButtons = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '‚ôà –û–≤–µ–Ω', callback_data: 'Aries'}, {text: '‚ôâ –¢–µ–ª–µ—Ü', callback_data: 'Taurus'}, {text: '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data: 'Gemini'}, {text: '‚ôã –†–∞–∫', callback_data: 'Cancer'}],
            [{text: '‚ôå –õ–µ–≤', callback_data: 'Leo'}, {text: '‚ôç –î–µ–≤–∞', callback_data: 'Virgo'}, {text: '‚ôé –í–µ—Å—ã', callback_data: 'Libra'}, {text: '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω', callback_data: 'Scorpio'}],
            [{text: '‚ôê –°—Ç—Ä–µ–ª–µ—Ü', callback_data: 'Sagittarius'}, {text: '‚ôë –ö–æ–∑–µ—Ä–æ–≥', callback_data: 'Capricorn'}, {text: '‚ôí –í–æ–¥–æ–ª–µ–π', callback_data: 'Aquarius'}, {text: '‚ôì –†—ã–±—ã', callback_data: 'Pisces'}],
        ]
    })
}

const getSubscribeTimesButtons = (type) => {
    const keyboard = [[], [], [], [], [], []];
    let position = 0;
    Object.keys(SUBSCRIBE_TIMES_DATA).forEach((time, i) => {
        if(i!== 0 && i % 4 === 0) {
            position++
        }

       keyboard[position].push({
           text: SUBSCRIBE_TIMES_DATA[time],
           callback_data: `subscribeTime${type}-${time}`
       })
   })

    return  {
        reply_markup: JSON.stringify({
            inline_keyboard: [...keyboard]
        })
    }
}

const zodiacSigns = {
    Aries: { title: '–û–≤–µ–Ω', request: 'o–≤–µ–Ω', symbol: '‚ôà'},
    Taurus: { title: '–¢–µ–ª–µ—Ü', request: 't–µ–ª–µ—Ü', symbol: '‚ôâ'},
    Gemini: { title: '–ë–ª–∏–∑–Ω–µ—Ü—ã', request: '–ë–ª–∏–∑–Ω–µ—Ü—ã', symbol: '‚ôä'},
    Cancer: { title: '–¢–µ–ª–µ—Ü', request: 'p–∞–∫', symbol: '‚ôã'},
    Leo: { title: '–õ–µ–≤', request: '–õ–µ–≤', symbol: '‚ôå'},
    Virgo: { title: '–î–µ–≤–∞', request: '–î–µ–≤–∞', symbol: '‚ôç'},
    Libra: { title: '–í–µ—Å—ã', request: 'b–µ—Å—ã', symbol: '‚ôé'},
    Scorpio: { title: '–°–∫–æ—Ä–ø–∏–æ–Ω', request: 'c–∫–æ—Ä–ø–∏–æ–Ω', symbol: '‚ôè'},
    Sagittarius: { title: '–°—Ç—Ä–µ–ª–µ—Ü', request: 'c—Ç—Ä–µ–ª–µ—Ü', symbol: '‚ôê'},
    Capricorn: { title: '–ö–æ–∑–µ—Ä–æ–≥', request: 'k–æ–∑–µ—Ä–æ–≥', symbol: '‚ôë'},
    Aquarius: { title: '–í–æ–¥–æ–ª–µ–π', request: 'b–æ–¥–æ–ª–µ–π', symbol: '‚ôí'},
    Pisces: { title: '–†—ã–±—ã', request: 'p—ã–±—ã', symbol: '‚ôì'},
}

const horoscopeData = {
    title: '',
    born: '',
    date: '',
    description: '',
    progress: {
        health: 0,
        energy: 0,
        money: 0,
        love: 0,
        work: 0,
        creation: 0,
    },
    luckyNumbers: '',
    friendlySigns: '',
    beware: '',
}

const getHoroscopeMsg = () => {
    return `*${horoscopeData.title}* (${horoscopeData.born})
    
*${horoscopeData.date}*
${horoscopeData.description} 
    
*–ó–¥–æ—Ä–æ–≤—å–µ*: ${horoscopeData.progress.health}%      *–≠–Ω–µ—Ä–≥–∏—è*: ${horoscopeData.progress.energy}%     *–î–µ–Ω—å–≥–∏*: ${horoscopeData.progress.money}% 
*–õ—é–±–æ–≤—å*: ${horoscopeData.progress.love}%          *–†–∞–±–æ—Ç–∞*: ${horoscopeData.progress.work}%       *–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ*: ${horoscopeData.progress.creation}%

*–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞*: ${horoscopeData.luckyNumbers}
*–î—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏*: ${horoscopeData.friendlySigns}
*–û—Å—Ç–µ—Ä–µ–≥–∞—Ç—å—Å—è*: ${horoscopeData.beware}`
}

const setTitle = (content) => {
    horoscopeData.title = formatText(content?.querySelector('.chi_left')?.getElementsByTagName('h1')[0]?.childNodes[0]?._rawText)?.toUpperCase();
}

const setBornPeriod = (content) => {
    horoscopeData.born = formatText(content?.querySelector('.chi_left')?.getElementsByTagName('h6')[0]?.childNodes[0]?._rawText);
}

const setDate = (content) => {
    horoscopeData.date = formatText(content?.getElementsByTagName('h4')[0]?.childNodes[0]?._rawText);
}

const setDescription = (content) => {
    horoscopeData.description = formatText(content?.getElementsByTagName('p')[0]?.childNodes[0]?._rawText);
}

const setLuckyNumbers = (content) => {
    horoscopeData.luckyNumbers = formatText(content?.getElementsByTagName('p')[1]?.childNodes[1]?._rawText);
}

const setFriendlySigns = (content) => {
    horoscopeData.friendlySigns = formatText(content?.getElementsByTagName('p')[2]?.childNodes[1]?._rawText);
}

const setBeware = (content) => {
    horoscopeData.beware = formatText(content?.getElementsByTagName('p')[3]?.childNodes[1]?._rawText);
}

const setProgress = (content) => {
    const progressBlock = content?.getElementById('for_day');
    const progressChildNodesKey = {
        health: 1,
        energy: 3,
        money: 5,
        love: 7,
        work: 15,
        creation: 17,
    }

    Object.keys(progressChildNodesKey).map(i => {
        horoscopeData.progress[i] = progressBlock.childNodes[progressChildNodesKey[i]]?.querySelector('.right')?.childNodes[0]?._rawText?.trim();
    })
}

const setHoroscopeData = (html) => {
    const content = html.querySelector('.wrap2');

    setTitle(content);
    setBornPeriod(content);
    setDate(content);
    setDescription(content);
    setLuckyNumbers(content);
    setFriendlySigns(content);
    setBeware(content);
    setProgress(content);
}

const getHoroscope = async (sign, day) => {
    let param = `${zodiacSigns[sign].request}`;

    if (day) day === 'nextDay' ? param += '_1' : param += '_-1';

    try {
        const resp = await fetch(`https://goroskop.tv/${param}`)
        const htmlText = await resp.text()
        setHoroscopeData(parseHtml(htmlText));
        return getHoroscopeMsg();
    } catch (e){
        console.log('Error getHoroscope', e)
    }
};

const getHoroscopeButtons = (sign) => {
    return {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '‚èÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å', callback_data: `previousDay-${sign}`}],
                [{text: '‚è≠ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', callback_data: `nextDay-${sign}`}],
                [{text: 'üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞', callback_data: `subscribeHoroscope-${sign}`}],
            ]
        }),
        parse_mode: 'Markdown'
    }
}


module.exports = {
    getHoroscope,
    zodiacSigns,
    zodiacSignsButtons,
    getHoroscopeButtons,
    getSubscribeTimesButtons,
}

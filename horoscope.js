const fetch = require("node-fetch");
const {parseHtml, formatText} = require("./helper");
const { SUBSCRIBE_TIMES_DATA } = require('./CONST.js');

const zodiacSignsButtons = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '‚ôà –û–≤–µ–Ω', callback_data: 'Aries'}, {text: '‚ôâ –¢–µ–ª–µ—Ü', callback_data: 'Taurus'}, {text: '‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã', callback_data: 'Gemini'}, {text: '‚ôã –†–∞–∫', callback_data: 'Cancer'}],
            [{text: '‚ôå –õ–µ–≤', callback_data: 'Leo'}, {text: '‚ôç –î–µ–≤–∞', callback_data: 'Virgo'}, {text: '‚ôé –í–µ—Å—ã', callback_data: 'Libra'}, {text: '‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω', callback_data: 'Scorpio'}],
            [{text: '‚ôê –°—Ç—Ä–µ–ª–µ—Ü', callback_data: 'Sagittarius'}, {text: '‚ôë –ö–æ–∑–µ—Ä–æ–≥', callback_data: 'Capricorn'}, {text: '‚ôí –í–æ–¥–æ–ª–µ–π', callback_data: 'Aquarius'}, {text: '‚ôì –†—ã–±—ã', callback_data: 'Pisces'}],
        ]
    })
}

const getSubscribeTimesButtons = (type) => {
    const keyboard = [[], [], [], [], [], []];
    let position = 0;
    Object.keys(SUBSCRIBE_TIMES_DATA).forEach((time, i) => {
        if(i!== 0 && i % 4 === 0) {
            position++
        }

       keyboard[position].push({
           text: SUBSCRIBE_TIMES_DATA[time],
           callback_data: `subscribeTime${type}-${time}`
       })
   })

    return  {
        reply_markup: JSON.stringify({
            inline_keyboard: [...keyboard]
        })
    }
}

const zodiacSigns = {
    Aries: { title: '–û–≤–µ–Ω', request: 'aries', symbol: '‚ôà', born: '21 –º–∞—Ä—Ç–∞ ‚Äì 19 –∞–ø—Ä–µ–ª—è'},
    Taurus: { title: '–¢–µ–ª–µ—Ü', request: 'taurus', symbol: '‚ôâ', born: '21 –∞–ø—Ä–µ–ª—è ‚Äì 20 –º–∞—è'},
    Gemini: { title: '–ë–ª–∏–∑–Ω–µ—Ü—ã', request: 'gemini', symbol: '‚ôä', born: '21 –º–∞—è ‚Äì 20 –∏—é–Ω—è'},
    Cancer: { title: '–†–∞–∫', request: 'cancer', symbol: '‚ôã', born: '21 –∏—é–Ω—è ‚Äì 22 –∏—é–ª—è'},
    Leo: { title: '–õ–µ–≤', request: 'leo', symbol: '‚ôå', born: '23 –∏—é–ª—è ‚Äì 22 –∞–≤–≥—É—Å—Ç–∞'},
    Virgo: { title: '–î–µ–≤–∞', request: 'virgo', symbol: '‚ôç', born: '23 –∞–≤–≥—É—Å—Ç–∞ ‚Äì 22 —Å–µ–Ω—Ç—è–±—Ä—è'},
    Libra: { title: '–í–µ—Å—ã', request: 'libra', symbol: '‚ôé', born: '23 —Å–µ–Ω—Ç—è–±—Ä—è ‚Äì 22 –æ–∫—Ç—è–±—Ä—è'},
    Scorpio: { title: '–°–∫–æ—Ä–ø–∏–æ–Ω', request: 'scorpio', symbol: '‚ôè', born: '23 –æ–∫—Ç—è–±—Ä—è ‚Äì 21 –Ω–æ—è–±—Ä—è'},
    Sagittarius: { title: '–°—Ç—Ä–µ–ª–µ—Ü', request: 'sagittarius', symbol: '‚ôê', born: '22 –Ω–æ—è–±—Ä—è ‚Äì 21 –¥–µ–∫–∞–±—Ä—è'},
    Capricorn: { title: '–ö–æ–∑–µ—Ä–æ–≥', request: 'capricorn', symbol: '‚ôë', born: '22 –¥–µ–∫–∞–±—Ä—è ‚Äì 19 —è–Ω–≤–∞—Ä—è'},
    Aquarius: { title: '–í–æ–¥–æ–ª–µ–π', request: 'aquarius', symbol: '‚ôí', born: '20 —è–Ω–≤–∞—Ä—è ‚Äì 18 —Ñ–µ–≤—Ä–∞–ª—è'},
    Pisces: { title: '–†—ã–±—ã', request: 'pisces', symbol: '‚ôì', born: '19 —Ñ–µ–≤—Ä–∞–ª—è ‚Äì 20 –º–∞—Ä—Ç–∞'},
}

const horoscopeData = {
    title: '',
    symbol: '',
    born: '',
    date: '',
    description: '',
    businessScore: '',
    loveScore: '',
}

const getHoroscopeMsg = () => {
    return `${horoscopeData.symbol} *${horoscopeData.title}* (${horoscopeData.born})
    
*${horoscopeData.date}*
${horoscopeData.description}`
}

const setDate = (content) => {
    horoscopeData.date = content.querySelector('span').text.replace('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ', '');
}

const setDescription = (article) => {
    let content = '';

    article?.forEach((item) => {
        const pElement = item.querySelector('div p');

        if (pElement) {
            content += `${pElement.text}\n\n`;
        }
    });

    horoscopeData.description = formatText(content);
}

const setHoroscopeData = (html, sign) => {
    const article = html.querySelectorAll('div[article-item-type="html"]');
    const currentDate = html.querySelector('div[data-logger="Breadcrumbs"][role="navigation"]');
    horoscopeData.title = zodiacSigns[sign].title;
    horoscopeData.symbol = zodiacSigns[sign].symbol;
    horoscopeData.born = zodiacSigns[sign].born;
    setDate(currentDate);
    setDescription(article);
}

const getHoroscope = async (sign, day) => {
    let param = `${zodiacSigns[sign].request}`;

    if (day) {
        day === 'nextDay' ? param += '/tomorrow' :  param += '/yesterday';
    } else {
        param += '/today';
    }


    try {
        const resp = await fetch(`https://horo.mail.ru/prediction/${param}`);
        const htmlText = await resp.text();
        setHoroscopeData(parseHtml(htmlText), sign);
        return getHoroscopeMsg();
    } catch (e){
        console.log('Error getHoroscope', e)
    }
};

const getHoroscopeButtons = (sign) => {
    return {
        reply_markup: JSON.stringify({
            inline_keyboard: [
                [{text: '‚èÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å', callback_data: `previousDay-${sign}`}],
                [{text: '‚è≠ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å', callback_data: `nextDay-${sign}`}],
                [{text: 'üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞', callback_data: `subscribeHoroscope-${sign}`}],
            ]
        }),
        parse_mode: 'Markdown'
    }
}


module.exports = {
    getHoroscope,
    zodiacSigns,
    zodiacSignsButtons,
    getHoroscopeButtons,
    getSubscribeTimesButtons,
}
